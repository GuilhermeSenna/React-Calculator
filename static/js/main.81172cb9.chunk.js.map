{"version":3,"sources":["components/DigitButton.js","components/OperationButton.js","App.js","index.js"],"names":["DigitButton","_ref","dispatch","digit","react_default","a","createElement","onClick","type","ACTIONS","ADD_DIGIT","payload","OperationButton","operation","CHOOSE_OPERATION","DELETE_DIGIT","EVALUATE","App","evaluate","_ref2","currentOperand","previousOperand","prev","parseFloat","current","isNaN","computation","toString","INTEGER_FORMATTER","Intl","NumberFormat","maximumFractionDigits","formatOperand","operand","_operand$split","split","_operand$split2","Object","slicedToArray","integer","decimal","format","concat","_useReducer","useReducer","state","overwrite","objectSpread","includes","length","slice","_useReducer2","_useReducer2$","useEffect","Fragment","className","components_OperationButton","components_DigitButton","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.81172cb9.chunk.js","sourcesContent":["import React from 'react';\r\nimport { ACTIONS } from \"../App\"\r\n\r\nconst DigitButton = ({ dispatch, digit }) => {\r\n\r\n    // console.log(digit)\r\n\r\n    const buttonHandler = () => {\r\n        dispatch({ type: ACTIONS.ADD_DIGIT, payload: { digit } })\r\n    }\r\n\r\n    return <button onClick={buttonHandler}>{digit}</button>\r\n}\r\n\r\nexport default DigitButton;","import React from 'react';\r\nimport { ACTIONS } from \"../App\"\r\n\r\nconst OperationButton = ({ dispatch, operation }) => {\r\n\r\n    // console.log(digit)\r\n\r\n    const buttonHandler = () => {\r\n        dispatch({ type: ACTIONS.CHOOSE_OPERATION, payload: { operation } })\r\n    }\r\n\r\n    return <button onClick={buttonHandler}>{operation}</button>\r\n}\r\n\r\nexport default OperationButton;","import React, { useEffect, useReducer } from 'react';\nimport DigitButton from './components/DigitButton';\nimport OperationButton from './components/OperationButton';\nimport './styles.css';\n\nexport const ACTIONS = {\n  ADD_DIGIT: 'add-digit',\n  CHOOSE_OPERATION: 'choose-operation',\n  // CLEAR: 'clear',\n  DELETE_DIGIT: 'delete-digit',\n  EVALUATE: 'evaluate'\n}\n\nfunction App() {\n\n  // state, action\n  const reducer = (state, { type, payload }) => {\n\n    // console.log(payload)\n\n    switch (type) {\n      case ACTIONS.ADD_DIGIT:\n\n        if (state.overwrite) {\n          return {\n            ...state,\n            currentOperand: payload.digit,\n            overwrite: false\n          }\n        }\n\n\n        // Doesn't allow adding more zeros if there is only one\n        if (payload.digit === \"0\" && state.currentOperand === \"0\") return state\n        if (payload.digit === \".\" && state.currentOperand.includes(\".\")) return state\n        return {\n          ...state,\n          currentOperand: `${state.currentOperand || \"\"}${payload.digit}`\n        }\n      case ACTIONS.CHOOSE_OPERATION:\n        if (state.currentOperand == null && state.previousOperand == null) {\n          return state;\n        }\n\n        // Allows to change the operator without cleaning the display\n        if (state.currentOperand == null) {\n          return {\n            ...state,\n            operation: payload.operation\n          }\n        }\n\n        if (state.previousOperand == null) {\n          return {\n            ...state,\n            operation: payload.operation,\n            previousOperand: state.currentOperand,\n            currentOperand: null\n          }\n        }\n\n        return {\n          ...state,\n          previousOperand: evaluate(state),\n          operation: payload.operation,\n          currentOperand: null\n        }\n      case ACTIONS.DELETE_DIGIT:\n        if (state.overwrite) {\n          return {\n            ...state,\n            overwrite: false,\n            currentOperand: null\n          }\n        }\n\n        if (state.currentOperand == null) return state\n\n        // With only one value on the stack\n        if (state.currentOperand.length === 1) {\n          return { ...state, currentOperand: null }\n        }\n\n        // Remove the last digit\n        return {\n          currentOperand: state.currentOperand.slice(0, -1)\n        }\n      case ACTIONS.EVALUATE:\n        if (state.operation == null || state.currentOperand == null || state.previousOperand == null) return state\n\n        // After the evaluation is finished, the new value will overwrite the remaining\n        return {\n          ...state,\n          overwrite: true,\n          previousOperand: null,\n          operation: null,\n          currentOperand: evaluate(state)\n        }\n\n      // Starts with 0\n      default:\n        return {\n          operation: null,\n          previousOperand: null,\n          currentOperand: evaluate(0)\n        }\n    }\n  }\n\n  // Function that returns the result\n  const evaluate = ({ currentOperand, previousOperand, operation }) => {\n    const prev = parseFloat(previousOperand);\n    const current = parseFloat(currentOperand);\n\n    if (isNaN(prev) || isNaN(current)) return \"\";\n\n    let computation = \"\"\n\n    switch (operation) {\n      case \"+\":\n        computation = prev + current\n        break\n      case \"-\":\n        computation = prev - current\n        break\n      case \"*\":\n        computation = prev * current\n        break\n      case \"/\":\n        computation = prev / current\n        break\n      default:\n        return \"\";\n    }\n\n    return computation.toString();\n  }\n\n  // Add comma for decimal separation\n  const INTEGER_FORMATTER = new Intl.NumberFormat(\"en-us\", {\n    maximumFractionDigits: 0,\n  });\n\n  // Logic for decimal separation and floating point\n  const formatOperand = (operand) => {\n    if (operand == null) return\n    const [integer, decimal] = operand.split('.')\n    if (decimal == null) return INTEGER_FORMATTER.format(integer);\n\n    return `${INTEGER_FORMATTER.format(integer)}.${decimal}`\n  }\n\n  const clearHandler = () => {\n    dispatch({ type: '' });\n  }\n\n  const evaluateHandler = () => {\n    dispatch({ type: ACTIONS.EVALUATE });\n  }\n\n  const deleteHandler = () => {\n    dispatch({ type: ACTIONS.DELETE_DIGIT });\n  }\n\n  const [{ currentOperand, previousOperand, operation }, dispatch] = useReducer(reducer, {});\n\n  // Starts initial value with 0\n  useEffect(() => {\n    dispatch({ type: '' })\n  }, [])\n\n  return (\n    <>\n      <div className=\"calculator-grid\">\n        <div className=\"output\">\n          <div className=\"previous-operand\">{formatOperand(previousOperand)} {operation}</div>\n          <div className=\"current-operand\">{formatOperand(currentOperand)}</div>\n        </div>\n        <button className=\"span-two\" onClick={clearHandler}>AC</button>\n        <button onClick={deleteHandler}>DEL</button>\n        <OperationButton operation=\"/\" dispatch={dispatch} />\n        <DigitButton digit=\"1\" dispatch={dispatch} />\n        <DigitButton digit=\"2\" dispatch={dispatch} />\n        <DigitButton digit=\"3\" dispatch={dispatch} />\n        <OperationButton operation=\"*\" dispatch={dispatch} />\n        <DigitButton digit=\"4\" dispatch={dispatch} />\n        <DigitButton digit=\"5\" dispatch={dispatch} />\n        <DigitButton digit=\"6\" dispatch={dispatch} />\n        <OperationButton operation=\"+\" dispatch={dispatch} />\n        <DigitButton digit=\"7\" dispatch={dispatch} />\n        <DigitButton digit=\"8\" dispatch={dispatch} />\n        <DigitButton digit=\"9\" dispatch={dispatch} />\n        <OperationButton operation=\"-\" dispatch={dispatch} />\n        <DigitButton digit=\".\" dispatch={dispatch} />\n        <DigitButton digit=\"0\" dispatch={dispatch} />\n        <button className=\"span-two\" onClick={evaluateHandler}>=</button>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}